from collections.abc import Iterable


def product(numbers: Iterable[float]) -> float:
    """Возвращает произведение чисел."""
    result = 1.0
    # УДАЛИТЬ: в этой функции цикл не нужен, вы должны использовать рекурсию вместо цикла
    for elem in numbers:
        # УДАЛИТЬ: такая проверка не имеет смысла, так как при корректной передаче аргумента все объекты elem должны быть объектами float — соответственно, во всех тестах ниже isinstance(elem, Iterable) никогда не вернёт True, соответственно рекурсивного вызова так ни разу и не случится — убедитесь в этом, добавив любой отладочный вывод в блок if
        if isinstance(elem, Iterable):
            result *= product(elem)
        else:
            result *= elem
    return result
    # СДЕЛАТЬ: подумайте, как перебрать элементы без цикла, но с помощью рекурсии
    # ПОДСКАЗКА: вам потребуется не произвольный итерируемый объект, а последовательность


# >>> product(range(10, 60, 10))
# 12000000.0
# >>> product((0.12, 0.05, -0.09, 0.0, 0.21))
# -0.0
# >>> product((0.2, 5, 0.1,(1 , 10)))
# 1.0
# >>>


# ИТОГ: переработать — 1/4
