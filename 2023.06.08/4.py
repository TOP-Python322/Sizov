def countable_nouns(number: int, tuples: tuple[str, str, str]) -> str:
    """Возвращает существительное русского языка, согласованное с числом"""
    # ИСПРАВИТЬ: операции со строками всегда менее производительны, чем операции с числами: здесь вы преобразовываете число в строку, затем обращаетесь к элементу строки по индексу, и наконец выполняете обратное преобразование в число — а можно было бы обойтись одной математической операцией взятия остатка от деления, это намного более эффективно с точки зрения производительности
    # ИСПРАВИТЬ: в условии задачи показано, что согласование должно осуществляться не только для одно- и двухзначных чисел (см. тест ниже)
    if int(repr(number)[-1]) == 1 and number != 11:
        return tuples[0]
    # ИСПРАВИТЬ: в случае, когда первое условие возвращает False, здесь вы повторно вычисляете последнюю цифру числа — это неоптимально, следует вычислить один раз и в дальнейшем использовать столько раз, сколько может быть необходимым
    # ИСПРАВИТЬ: обеспечить согласование для чисел любой разрядности (см. тест ниже) — посмотрите внимательно на ряды чисел в условии задачи и подумайте о том, что именно необходимо проверять
    elif int(repr(number)[-1]) <= 4 and (number <= 4 or number > 14):
        return tuples[1]
    else:
        return tuples[2]


# >>> countable_nouns(1, ("год", "года", "лет"))
# 'год'
# >>> countable_nouns(2, ("год", "года", "лет"))
# 'года'
# >>> countable_nouns(10, ("год", "года", "лет"))
# 'лет'
# >>> countable_nouns(12, ("год", "года", "лет"))
# 'лет'
# >>> countable_nouns(22, ("год", "года", "лет"))
# 'года'

# ДОБАВИТЬ везде и всегда: тесты не только по примерам, но для всех возможных ситуаций, например:
# >>> countable_nouns(111, ('час', 'часа', 'часов'))
# КОММЕНТАРИЙ: должно быть 'часов'
# 'час'
# >>> countable_nouns(1013, ('метр', 'метра', 'метров'))
# КОММЕНТАРИЙ: должно быть 'метров'
# 'метра'


# ИТОГ: нужно лучше — 2/5
